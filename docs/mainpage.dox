// -*- mode:c++ -*-

/// @mainpage Partial Diamon Matrix Powers Kernel (PDMPK)
///
/// Given a (sparse) matrix \f$A \in \mathbb{R}^{n \times n}\f$ and
/// vector \f$v \in \mathbb{R}\f$ MPK generates \f[ Av, A^2v, \ldots,
/// A^m v \f]
///
/// # Building using CMake
///
/// In the root directory (which contains CMakeLists.txt).
///
/// @code
/// mkdir Debug
/// cmake . -DCMAKE_BUILD_TYPE=Debug Debug
/// cmake --build Debug
/// @endcode
///
/// # Usage
///
/// ## Generating mtx files
///
/// Assuming `gen2` and `gen2mtx` are compiled in `../mpk2/` (these
/// should probably rewritten in C++).
///
/// @code
/// ../mpk2/gen2 m5p4 4 m5p4
/// ../mpk2/gen2mtx m5p4.loop.g0
/// @endcode
///
/// ## Running the programs
///
/// @code
/// ./pdmpk_prep m5p4.loop.mtx 4 4 # second 4 is nlevels
/// mpirun -n 4 ./pdmpk_exec
/// @endcode
///
/// `orterun` is OpenMPI version of `mpirun` if it is in conflict with
/// Intel's `mpirun`.
///
/// @see @ref pdmpk_prep @see @ref pdmpk_exec @see @ref pdmpk_test
///
/// @todo(vatai): Finish documentation here.
///
/// @todo(vatai): Change comm_dict to store sets instead of vectors to
/// avoid duplicates in sbuf.
///
/// @todo(vatai): Implement communication optimisation.
///
/// @todo(vatai): Implement custom input vector loading.
///
/// @todo(vatai): Collect results.
///
/// @todo(vatai): Implement true mval test.
///
/// @todo(vatai): Implement custom input vector test.
///
/// @todo(vatai): Implement measurements.
